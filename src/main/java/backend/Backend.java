package backend;

import intermediate.ICode;
import intermediate.SymTab;
import message.Message;
import message.MessageHandler;
import message.MessageListener;
import message.MessageProducer;

/**
 * Created by patrick on 2016/5/8.
 */

/**
 * <h1>Backend</h1>
 *
 * <p>The framework class that represents the back end component.</p>
 */
public abstract class Backend implements MessageProducer{
    protected static MessageHandler messageHandler;

    static {
        messageHandler = new MessageHandler();
    }
    protected SymTab symTab;
    protected ICode iCode;

    /**
     * Process the intermediate code and the symbol table generated by the parser. To be implemented by a compiler or an interpreter subclass.
     * @param iCode the intermediate code.
     * @param symTab the symbol table.
     * @throws Exception if an error occurred.
     */
    public abstract void process(ICode iCode, SymTab symTab) throws Exception;

    public void addMessageListener(MessageListener listener) {
        messageHandler.addListener(listener);
    }

    public void removeMessageListener(MessageListener listener) {
        messageHandler.removeListener(listener);
    }

    public void sendMessage(Message message) {
        messageHandler.sendMessage(message);
    }
}
