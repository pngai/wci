package backend.compiler;

import backend.Backend;
import intermediate.ICode;
import intermediate.SymTab;
import intermediate.SymTabStack;
import message.Message;
import message.MessageListener;
import message.MessageType;

/**
 * Created by patrick on 2016/5/10.
 */
public class CodeGenerator extends Backend{
    /**
     * Process the intermediate code code and the symbol table generated by the parser to generate machine-language instructions.
     * @param iCode the intermediate code.
     * @param symTabStack the symbol table.
     * @throws Exception if an error occurred.
     */
    public void process(ICode iCode, SymTabStack symTabStack) throws Exception {
        long startTime = System.currentTimeMillis();
        float elapsedTime = (System.currentTimeMillis() - startTime) / 1000f;
        int instructionCount = 0;
        sendMessage(new Message(MessageType.COMPILER_SUMMARY, new Number[]{instructionCount, elapsedTime}));
    }

}
